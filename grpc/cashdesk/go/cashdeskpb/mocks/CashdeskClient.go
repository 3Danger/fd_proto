// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	context "context"

	cashdeskpb "git.vseinstrumenti.net/fd/proto/grpc/cashdesk/go/cashdeskpb"

	emptypb "google.golang.org/protobuf/types/known/emptypb"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// CashdeskClient is an autogenerated mock type for the CashdeskClient type
type CashdeskClient struct {
	mock.Mock
}

type CashdeskClient_Expecter struct {
	mock *mock.Mock
}

func (_m *CashdeskClient) EXPECT() *CashdeskClient_Expecter {
	return &CashdeskClient_Expecter{mock: &_m.Mock}
}

// SendEventResult provides a mock function with given fields: ctx, in, opts
func (_m *CashdeskClient) SendEventResult(ctx context.Context, in *cashdeskpb.SendEventResultRequest, opts ...grpc.CallOption) (*cashdeskpb.SendEventResultResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cashdeskpb.SendEventResultResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cashdeskpb.SendEventResultRequest, ...grpc.CallOption) (*cashdeskpb.SendEventResultResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cashdeskpb.SendEventResultRequest, ...grpc.CallOption) *cashdeskpb.SendEventResultResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cashdeskpb.SendEventResultResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cashdeskpb.SendEventResultRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CashdeskClient_SendEventResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEventResult'
type CashdeskClient_SendEventResult_Call struct {
	*mock.Call
}

// SendEventResult is a helper method to define mock.On call
//   - ctx context.Context
//   - in *cashdeskpb.SendEventResultRequest
//   - opts ...grpc.CallOption
func (_e *CashdeskClient_Expecter) SendEventResult(ctx interface{}, in interface{}, opts ...interface{}) *CashdeskClient_SendEventResult_Call {
	return &CashdeskClient_SendEventResult_Call{Call: _e.mock.On("SendEventResult",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *CashdeskClient_SendEventResult_Call) Run(run func(ctx context.Context, in *cashdeskpb.SendEventResultRequest, opts ...grpc.CallOption)) *CashdeskClient_SendEventResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*cashdeskpb.SendEventResultRequest), variadicArgs...)
	})
	return _c
}

func (_c *CashdeskClient_SendEventResult_Call) Return(_a0 *cashdeskpb.SendEventResultResponse, _a1 error) *CashdeskClient_SendEventResult_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CashdeskClient_SendEventResult_Call) RunAndReturn(run func(context.Context, *cashdeskpb.SendEventResultRequest, ...grpc.CallOption) (*cashdeskpb.SendEventResultResponse, error)) *CashdeskClient_SendEventResult_Call {
	_c.Call.Return(run)
	return _c
}

// SendWorkstationLogs provides a mock function with given fields: ctx, in, opts
func (_m *CashdeskClient) SendWorkstationLogs(ctx context.Context, in *cashdeskpb.SendWorkstationLogsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cashdeskpb.SendWorkstationLogsRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cashdeskpb.SendWorkstationLogsRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cashdeskpb.SendWorkstationLogsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CashdeskClient_SendWorkstationLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendWorkstationLogs'
type CashdeskClient_SendWorkstationLogs_Call struct {
	*mock.Call
}

// SendWorkstationLogs is a helper method to define mock.On call
//   - ctx context.Context
//   - in *cashdeskpb.SendWorkstationLogsRequest
//   - opts ...grpc.CallOption
func (_e *CashdeskClient_Expecter) SendWorkstationLogs(ctx interface{}, in interface{}, opts ...interface{}) *CashdeskClient_SendWorkstationLogs_Call {
	return &CashdeskClient_SendWorkstationLogs_Call{Call: _e.mock.On("SendWorkstationLogs",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *CashdeskClient_SendWorkstationLogs_Call) Run(run func(ctx context.Context, in *cashdeskpb.SendWorkstationLogsRequest, opts ...grpc.CallOption)) *CashdeskClient_SendWorkstationLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*cashdeskpb.SendWorkstationLogsRequest), variadicArgs...)
	})
	return _c
}

func (_c *CashdeskClient_SendWorkstationLogs_Call) Return(_a0 *emptypb.Empty, _a1 error) *CashdeskClient_SendWorkstationLogs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CashdeskClient_SendWorkstationLogs_Call) RunAndReturn(run func(context.Context, *cashdeskpb.SendWorkstationLogsRequest, ...grpc.CallOption) (*emptypb.Empty, error)) *CashdeskClient_SendWorkstationLogs_Call {
	_c.Call.Return(run)
	return _c
}

// StreamWorkstationEvents provides a mock function with given fields: ctx, in, opts
func (_m *CashdeskClient) StreamWorkstationEvents(ctx context.Context, in *cashdeskpb.StreamWorkstationEventsRequest, opts ...grpc.CallOption) (cashdeskpb.Cashdesk_StreamWorkstationEventsClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 cashdeskpb.Cashdesk_StreamWorkstationEventsClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cashdeskpb.StreamWorkstationEventsRequest, ...grpc.CallOption) (cashdeskpb.Cashdesk_StreamWorkstationEventsClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cashdeskpb.StreamWorkstationEventsRequest, ...grpc.CallOption) cashdeskpb.Cashdesk_StreamWorkstationEventsClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cashdeskpb.Cashdesk_StreamWorkstationEventsClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cashdeskpb.StreamWorkstationEventsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CashdeskClient_StreamWorkstationEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamWorkstationEvents'
type CashdeskClient_StreamWorkstationEvents_Call struct {
	*mock.Call
}

// StreamWorkstationEvents is a helper method to define mock.On call
//   - ctx context.Context
//   - in *cashdeskpb.StreamWorkstationEventsRequest
//   - opts ...grpc.CallOption
func (_e *CashdeskClient_Expecter) StreamWorkstationEvents(ctx interface{}, in interface{}, opts ...interface{}) *CashdeskClient_StreamWorkstationEvents_Call {
	return &CashdeskClient_StreamWorkstationEvents_Call{Call: _e.mock.On("StreamWorkstationEvents",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *CashdeskClient_StreamWorkstationEvents_Call) Run(run func(ctx context.Context, in *cashdeskpb.StreamWorkstationEventsRequest, opts ...grpc.CallOption)) *CashdeskClient_StreamWorkstationEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*cashdeskpb.StreamWorkstationEventsRequest), variadicArgs...)
	})
	return _c
}

func (_c *CashdeskClient_StreamWorkstationEvents_Call) Return(_a0 cashdeskpb.Cashdesk_StreamWorkstationEventsClient, _a1 error) *CashdeskClient_StreamWorkstationEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CashdeskClient_StreamWorkstationEvents_Call) RunAndReturn(run func(context.Context, *cashdeskpb.StreamWorkstationEventsRequest, ...grpc.CallOption) (cashdeskpb.Cashdesk_StreamWorkstationEventsClient, error)) *CashdeskClient_StreamWorkstationEvents_Call {
	_c.Call.Return(run)
	return _c
}

// NewCashdeskClient creates a new instance of CashdeskClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCashdeskClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *CashdeskClient {
	mock := &CashdeskClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
