// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.3
// source: grpc/cashdesk/cashdesk.proto

package cashdeskpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CashdeskClient is the client API for Cashdesk service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CashdeskClient interface {
	StreamWorkstationEvents(ctx context.Context, in *StreamWorkstationEventsRequest, opts ...grpc.CallOption) (Cashdesk_StreamWorkstationEventsClient, error)
}

type cashdeskClient struct {
	cc grpc.ClientConnInterface
}

func NewCashdeskClient(cc grpc.ClientConnInterface) CashdeskClient {
	return &cashdeskClient{cc}
}

func (c *cashdeskClient) StreamWorkstationEvents(ctx context.Context, in *StreamWorkstationEventsRequest, opts ...grpc.CallOption) (Cashdesk_StreamWorkstationEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cashdesk_ServiceDesc.Streams[0], "/net.vseinstrumenti.git.fd.proto.cashdesk.Cashdesk/StreamWorkstationEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &cashdeskStreamWorkstationEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cashdesk_StreamWorkstationEventsClient interface {
	Recv() (*StreamWorkstationEventsResponse, error)
	grpc.ClientStream
}

type cashdeskStreamWorkstationEventsClient struct {
	grpc.ClientStream
}

func (x *cashdeskStreamWorkstationEventsClient) Recv() (*StreamWorkstationEventsResponse, error) {
	m := new(StreamWorkstationEventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CashdeskServer is the server API for Cashdesk service.
// All implementations must embed UnimplementedCashdeskServer
// for forward compatibility
type CashdeskServer interface {
	StreamWorkstationEvents(*StreamWorkstationEventsRequest, Cashdesk_StreamWorkstationEventsServer) error
	mustEmbedUnimplementedCashdeskServer()
}

// UnimplementedCashdeskServer must be embedded to have forward compatible implementations.
type UnimplementedCashdeskServer struct {
}

func (UnimplementedCashdeskServer) StreamWorkstationEvents(*StreamWorkstationEventsRequest, Cashdesk_StreamWorkstationEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamWorkstationEvents not implemented")
}
func (UnimplementedCashdeskServer) mustEmbedUnimplementedCashdeskServer() {}

// UnsafeCashdeskServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CashdeskServer will
// result in compilation errors.
type UnsafeCashdeskServer interface {
	mustEmbedUnimplementedCashdeskServer()
}

func RegisterCashdeskServer(s grpc.ServiceRegistrar, srv CashdeskServer) {
	s.RegisterService(&Cashdesk_ServiceDesc, srv)
}

func _Cashdesk_StreamWorkstationEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamWorkstationEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CashdeskServer).StreamWorkstationEvents(m, &cashdeskStreamWorkstationEventsServer{stream})
}

type Cashdesk_StreamWorkstationEventsServer interface {
	Send(*StreamWorkstationEventsResponse) error
	grpc.ServerStream
}

type cashdeskStreamWorkstationEventsServer struct {
	grpc.ServerStream
}

func (x *cashdeskStreamWorkstationEventsServer) Send(m *StreamWorkstationEventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Cashdesk_ServiceDesc is the grpc.ServiceDesc for Cashdesk service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cashdesk_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "net.vseinstrumenti.git.fd.proto.cashdesk.Cashdesk",
	HandlerType: (*CashdeskServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamWorkstationEvents",
			Handler:       _Cashdesk_StreamWorkstationEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/cashdesk/cashdesk.proto",
}
